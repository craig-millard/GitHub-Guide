---
title: GitHub and Git
subtitle: |
  Standard Operating Procedures (SOP) \
  version 3.1
date: "October 13, 2022"
author:
  - name: NMFS R User Group
format: 
  html: 
    number-sections: true
  titlepage-pdf:
    include-in-header:
      text: |
        \usepackage[headsepline,automark]{scrlayer-scrpage}
        \ohead{\pagemark}
        \chead{}
        \ihead{GitHub and Git SOP from NMFS R UG (Oct 2022)}
    documentclass: scrartcl
    number-sections: true
    titlepage: "plain"
    titlepage-logo: "images/nmfs-r-ug-logo.png"
    titlepage-geometry: ["top=3in", "bottom=1in", "right=1in", "left=1in"]
    titlepage-theme:
      elements: ["\\titleblock", "\\authorblock", "\\vfill", "\\logoblock"]
      logo-align: "right"
      logo-size: "2in"
      page-align: "right"
      title-fontsize: 18
      subtitle-fontsize: 16
      author-fontsize: 16
      footer-fontsize: 16
      title-space-after: "1cm"
      logo-space-after: "0pt"
      title-subtitle-space-between: "0.5cm"
      title-fontstyle: ["bfseries"]
      subtitle-fontstyle: ["bfseries"]
      author-fontstyle: ["bfseries"]
      date-fontstyle: ["bfseries"]
---

## Introduction {#sec-introduction}

NOAA's official GitHub policy from 2017 may be found [here](https://drive.google.com/file/d/1oBBCEHjENjmLgS2fKJX3lOQ15bOZhlWJ/view?usp=sharing). Since 2017, GitHub use has expanded greatly across NMFS and all the federal agencies ([link](https://nmfs-opensci.github.io/ResourceBook/content/github_in_gov.html#github-in-other-agencies)). The 2017 memo guidelines are not designed for science teams and scientific work that is done on GitHub. In addition, the 2017 memo largely focuses on the @NOAAGov GitHub organization, but NMFS GitHub use is not on this organization. This SOP was developed by the NMFS R User Group admins to provide practical help and guidelines for the wide variety of ways that Git and GitHub are used within NOAA Fisheries. This SOP was influenced by the SEFSC GitHub SOP released in October 2021 and by the work from the Fisheries Integrated Toolbox team who developed standardized GitHub guidelines and "best practices" for NMFS tool developers.

These guidelines are intended for scientific products that are low FISMA for which FedRAMP is not required. Scientific products are not generally considered official communication or business, and a disclaimer is added to GitHub repositories to state this. However, those who are handling higher FISMA data, relying on GitHub as the main data repository for official data, or working on products that will be official communications will need to seek further guidance for using GitHub.

## Guidelines for Use of GitHub at NOAA Fisheries {#sec-guidelines}

The information here is intended to provide employees and affiliates of NOAA Fisheries (NMFS) with practical guidance and "best practices" for how to use GitHub. "NOAA allows use of GitHub to share code and content in the spirit of collaboration and open government." (memo). NOAA has a strong history of scientific collaboration, coordination, and close engagement with other government partners, non-government organizations, academic institutions, international colleagues, and other members of the scientific research community.

### Glossary {#sec-glossary}

**NOAA Branded Product** - NOAA branded Organizations are created by a science center (or regional office), division, or program for its official products. These GitHub organizations are distinguished by clear branding that indicates that the repositories are official agency products.

**GitHub Organization** - Organizations are shared accounts where members of the organization can collaborate across many repositories at once. Owners and administrators can manage member access to the organization's data and projects with sophisticated security and administrative features.

**Repository** - A repository is hosted online and contains all of a project's files and each file's revision history.

### What Content Can Be Shared on GitHub?  {#sec-what-can-be-shared}

Generally, content on GitHub is limited to NOAA's scientific products as defined in the [NOAA Scientific Integrity Policy](https://sciencecouncil.noaa.gov/Scientific-Integrity-Commons/SIC-Integrity-Policy). This policy defines such products as "The results of scientific activities including the analysis, synthesis, compilation, or translation of scientific information and data into electronic and hardcopy formats for the use of NOAA, the Department of Commerce, or the Nation. These products include, but are not limited to, experimental and operational models, forecasts, graphics, and verbal and written communications of all kinds relating to scientific activities, including NOAA social media accounts."

The open source nature of GitHub allows content to be available for other developers to build upon or contribute to via fork, clone, or pull request. Embracing this open source workflow often facilitates open review by allowing others to comment and offer solutions for open issues, improving bug reports by allowing users to see source code, and providing the full history of the project changes (i.e., version control). Note, "open source" is not equivalent to making content publicly accessible. The level of visibility of a repository to the general public is a separate decision and is project dependent.

## Account Guidelines  {#sec-account-guidelines}

### GitHub Personal Account Settings

In order to collaborate with colleagues and contribute to open science and open government over GitHub, you will need a GitHub account. This will allow you to create GitHub repositories, participate in GitHub organizations, use version control with GitHub, fork or clone repositories, contribute to other GitHub repositories, among other features.

-   There should be clear separation between any use of GitHub associated with your NOAA activities and non-NOAA activities. You are not required to append "-NOAA" to your NOAA GitHub username, but it may be helpful for distinguishing between accounts if you use GitHub for NOAA work and non-NOAA work[^2].
-   When creating an account on GitHub.com use your @noaa.gov email as primary (under Settings/account) and as the notification email (under Settings/notifications). The latter ensures that notifications on work related repositories are sent to your NOAA email, not to a personal or university email address.
-   Fill out your profile with your name and NOAA affiliation.
-   Provide a real photograph of yourself as your Github profile.
-   Enable Two-Factor Authentication.

::: {.callout-note}

Your NOAA supervisor should be aware of your use of GitHub and have a clear understanding of what content is being shared on GitHub.

:::

### GitHub Repository Guidelines

GitHub provides a platform to host official work products, however GitHub repositories are used for a variety of purposes and not all repositories are “products”. Repositories are also used for project management, development, training, and sandboxing ideas. 

However, all repositories, regardless of purpose, must follow these general guidelines:

* PII and BII should not be shared (on purpose or inadvertently) on GitHub regardless of whether the repository is in a private or public repository. Best practices and safeguards must be followed to prevent this. 
* No sensitive information should be shared in repositories. Sensitive information includes, but is not limited to, usernames, passwords, login information, port numbers, IP addresses, server names, Application Programming Interface (API) keys, Personally Identifiable Information (PII), Business Identifiable Information (BII), or confidential data.
* GitHub is not a back-up service nor is it a data repository. Other tools are designed for this purpose. At the minimum, this means maintaining a clone on at least one government furnished laptop or server. *Managers of NOAA branded GitHub organizations should work with their IT department to ensure automated regular backups of the organization repositories.* In other guidelines, this is often referred to as a “gold standard copy”.
* Only scientific content (@sec-what-can-be-shared) that can be reasonably classified as FISMA Low (@sec-security-fisma-low) should be shared on GitHub.
* Repositories that have code that interacts with APIs using IP addresses, usernames, passwords, secrets, or credentials must take steps to prevent committing of “secrets” to GitHub. (See @sec-security-sensitive).

### Disclaimers and Licenses

If your repository represents something you produced in the course of your work at NOAA and could be considered a ‘work product’, then your repository should include a README (@sec-readme), the government product DISCLAIMER (@sec-disclaimer), and LICENSE file (@sec-license). If the work is something that can be cited, then also include citation information and a DOI[^3].


### Repositories Under Individual Accounts

GitHub repositories can be created under your individual GitHub account or under a GitHub organization that you are a member of. If you have NOAA work products[^1] hosted under your individual GitHub account, you need to do the following to ensure your NOAA work is transferred to a new NOAA owner when you leave NOAA.

- The repository ownership must be transferred to another NOAA individual GitHub owner at NOAA or to a NOAA GitHub organization when an individual leaves NOAA.
- Under Settings, specify a successor who can take over your account if you are unable to transfer your repositories.

What about a repository associated with a journal article if writing this was part of your NOAA job? Transferring that kind of repository would probably not make sense. The transferring policy is for things that someone who is on-boarding for your job will need. Think about the kinds of work you would transfer off your computer during off-boarding.

:::{.callout-tip}

## GitHub Organizations

You can also create your work repositories in a GitHub organization rather than your individual GitHub account. GitHub organizations can be set-up so that its members can create and manage their repositories freely as they would in their individual account. Creating work repositories in a GitHub organization greatly streamlines on-boarding and off-boarding. It also makes it easier for all team members to use similar templates for their repositories.

:::


[^1]: What is a NOAA work product? First, this is part of your job and you are being paid by NOAA to do this work. Second, it is a product. A repo that you throw on to GitHub as part of something you are sandboxing or during a workshop you are taking is not a 'product'. Would you put a DOI on this thing? Yes? That's probably a product.

[^2]: Work when not employed by NOAA or work that is not part of your job and you are not paid for this work by NOAA.

[^3]: DOIs are easy to generate with the Zenodo plugin for your GitHub repositories. Read how [here](https://docs.github.com/en/repositories/archiving-a-github-repository/referencing-and-citing-content).

### GitHub Organization Settings

GitHub organizations is simply an account where multiple GitHub users can be named as members who are then given permission to create repositories. The organization can as many admins as you need, but 2-3 is common. Anyone can create a GitHub organization and it is a convenient way for teams or groups to organize and collaborate on a thematic set of repositories. In addition, a GitHub organization allows members to manage project boards, tasks, and discussions, and allows the admins to customize permission settings for the organization members. 

The following are basic best practices for GitHub organizations.

* Fill out the organization profile with the NOAA affiliation.
* Provide contact information for the organization owner(s) or maintainer(s). Ensure that the organization has multiple owners who are able to manage the site. Ensure that when an organization owner leaves NOAA, another owner is able to manage the organization and all repositories.
* Create a `README.md` file for the organization in the `.github/Profile` folder. This README will then appear on the front page of the organization and can be used to describe the organization’s purpose, affiliations, and repositories.

:::{.callout-tip}

## Naming Conventions

If your GitHub organization is specific to one center, be aware that some centers use a naming convention, e.g., `nwfsc-mathbio`.

:::

#### NOAA Branded Organizations {#sec-branded}

There is nothing inherently official or formal about a GitHub organization; it is simply an account with multiple GitHub users (members). However a GitHub organization can be formal and highly regulated. A GitHub organization that delivers official products for the public would fall under this category and these organizations would clear NOAA logos, text and other branding.

GitHub organizations that deliver official NOAA products will need to have formal guidelines for participation in the organization. Examples of the guidelines include only allowing NOAA members to participate, no direct push access by non-NOAA accounts, guidelines for code review and tests, push access to repositories or visibility limited to specific members, naming conventions for repositories, and guidelines for repository structure. 

### Collaboration with non-NOAA GitHub users

From the 2017 guidelines: “NOAA has a strong history of scientific collaboration, coordination, and close engagement with other government partners, non-government organizations, academic institutions, international colleagues, and other members of the scientific research community.” GitHub facilitates collaboration with non-NOAA collaborators and this is encouraged, however care needs to be taken for NOAA branded GitHub organizations and repositories. See @sec-branded on common restrictions placed on NOAA branded GitHub organizations and repositories.

## Security {#sec-security}

### FISMA Low  {#sec-security-fisma-low}

The scientific product on GitHub must be reasonably classifiable as FISMA Low, as outlined by the Federal Information Security Management Act of 2002. FISMA Low classification includes only information for which the unauthorized disclosure, unauthorized modification, unauthorized destruction, or disruption of access can be expected to have a limited adverse effect on organizational operations, organizational assets, or individuals. If the effect of such events would be serious, severe, or catastrophic, the information cannot be released under this authority.

### Sensitive information cannot be shared on GitHub {#sec-security-sensitive}

No usernames, passwords, login information, port numbers, IP addresses, server names, Application Programming Interface (API) keys, Personally Identifiable Information (PII), Business Identifiable Information (BII), or confidential data may be stored in any file hosted on GitHub. Read Section 3.3 on how to properly store and use credentials. If you have GitHub Actions or Pages that use credentials, then Encrypted Secrets inside of GitHub is also acceptable for API (Application Programming Interface) keys and similarly credentialed interfaces.

### Preventing inadvertent committing of secrets or credentials to GitHub

If your repository code uses confidential data or connects to APIs using IP addresses, usernames, passwords, secrets, or credentials, then you must take steps to ensure that you do not inadvertently commit these to GitHub. Ensuring that confidential data or secrets do not get pushed to GitHub requires diligence and deliberate choices in your workflow.

::: {.callout-note}

Your approach must be tailored to the nature of your work and the content of the repository. For example, a repository that is a package for fitting species distribution models to generic data or a demo repository for teaching purposes is very different from a repository that produces an official report using confidential fisheries data.

:::

#### Prevent Damage

**Establish a workflow that keeps confidential information separate from non-confidential information**

* Separate your files into “public” and “secrets” folders. Confidential data or secrets cannot be dispersed throughout your code and files. Clearly distinguishing between “public” and “secrets” in your code and files will require a deliberate and carefully designed file organization.
* Once you have “safe” and “unsafe” folders delineated for your repository, use the `.gitignore` file to prevent these from being pushed to GitHub. You may need to add these files to the `.gitignore` file before you push to your GitHub repository.
* Alternatively, for code that integrates data or databases, develop a public version of the package. This public version of the package would not include any of the data or credentials and can then be used locally and called with arguments to create the output.

**Passwords and API links**

* Never leave usernames or passwords into your code or scripts. While it may be tempting to save time, this habit is a common cause of inadvertent sharing of credentials and is a security risk.
* The {dotenv} and {[keyring](https://CRAN.R-project.org/package=keyring)} packages can be used to securely store API links and credentials for connecting to databases, APIs, and other services. These packages are easy to use and implement into your workflow. Other APIs (like Google Drive) use a secrets folder which has encrypted tokens for accessing their APIs.
* The basic idea is to keep the “keys” on your local computer so you’ll need to add the folders or files with the secrets to your `.gitignore` file.
* GitHub Actions or Pages that use API (Application Programming Interface) keys and similarly credentialed interfaces can use Encrypted Secrets inside of GitHub.

**Restrict push permissions and require pull-requests and code review**

You can incorporate code and content review but only allow pull requests and no direct push access. This allows time for a manual review of the material being pushed to GitHub.

**Customized pre-commit hooks to prevent committing secrets**

Repositories that are in danger of committing access keys to cloud computing resources or similar credentials with high consequences will need to implement mechanisms to prevent committing secrets to GitHub in the first place. [gitleaks](https://github.com/gitleaks/gitleaks-action) provides this mechanism, but implementing it is involved. It uses “git hooks”, which are a special file in the `.git/hooks` folder within a repository. See the {gitleaks} documentation. Another option is the [git-secrets](https://github.com/awslabs/git-secrets) add-on which you install locally. 

Note, these scanners are not magic and need to be customized and tested. Get some help if you need to do this. Also these scanners are not designed to catch something like confidential fisheries data or a simple text password hard-coded into a script. They are designed for things that look like AWS keys or API keys.

#### Detect Damage

If a secret has mistakenly made it onto GitHub, you will need to remove it as soon as possible and change keys/passwords that were shared. Enabling repository scanning via a 'secrets' scanner such as [gitleaks GitHub Action](https://github.com/gitleaks/gitleaks-action) can provide an alert if someone inadvertently commit secrets to your repository. The scan will be automatically run using a “GitHub Action” every time a “push” or “pull request” is completed. Note, this is not a free service. If you have an Enterprise account, secrets scanning is included in the license and you should reach out to the Enterprise account admin to get that set up. But always test by committing some dummy secrets that should be caught by the scanner.


## GitHub Repository Components

### README.md {#sec-readme}

This file should provide a description of the repository. The contents of the README file will vary greatly depending on the application. Here are some tips: 

* **An official work product released on a NOAA-branded GitHub organization**. This is the most formal instance and the organization leaders should develop template READMEs to provide a consistent format across the products.
* **A software package (e.g., R package)**. Standard components are: Badges indicating build status and version, how to install, how to use or link to documentation, where to report issues, citation. 
* **A report or paper.** Author, description and citation.
* Add the DISCLAIMER (below) for any repository that is a 'work product'.

### DISCLAIMER.md {#sec-disclaimer}

Repositories and web content shared on GitHub should make it clear to the audience that no information should be considered or interpreted as official communication of NOAA. The simplest method for doing this is to include the following disclaimer within a `DISCLAIMER.md` file at the root of each repository. Additionally, it's also good practice to include the disclaimer text as a footnote within the repository's `README.md` and any web content available from that repository. Be careful not to use NOAA logos and and NOAA Fisheries branding in a way that could imply an official communication. NOAA logos should be used to indicate your affiliation and acknowledge support and funding. The repositories within the NOAA [Fisheries Integrated Toolbox](https://github.com/nmfs-fish-tools) GitHub organization are good examples of how to prepare README files with the Disclaimer and NOAA Fisheries logos. 

The following `DISCLAIMER.md` file is put in the root of the repository.

::: {.callout-note icon=false}

## DISCLAIMER.md

This repository is a scientific product and is not official communication of the National Oceanic and Atmospheric Administration, or the United States Department of Commerce. All NOAA GitHub project code is provided on an 'as is' basis and the user assumes responsibility for its use. Any claims against the Department of Commerce or Department of Commerce bureaus stemming from the use of this GitHub project will be governed by all applicable Federal law. Any reference to specific commercial products, processes, or services by service mark, trademark, manufacturer, or otherwise, does not constitute or imply their endorsement, recommendation or favoring by the Department of Commerce. The Department of Commerce seal and logo, or the seal and logo of a DOC bureau, shall not be used in any manner to imply endorsement of any commercial product or activity by DOC or the United States Government.

:::

### LICENSE Files {#sec-license}

The work of U.S. Government employees is not subject to copyright in the U.S. Thus you should include an appropriate LICENSE file with your repositories. There are two types of licenses that are commonly used: Creative Commons Zero v1.0 Universal (CC0 1.0 Universal) and (GNU General Public License v3.0) GPL-3. The CC0 license is commonly used for US Government products but the NOAA Fisheries Integrated Toolbox prefers the GPL-3 license since it is more tailored for code products. 

To add a LICENSE file to your repository, navigate to the repository on GitHub.com, select "add file,", select "create new file", and type LICENSE. You will then see the button in the upper right hand of the page to choose a license file. Additionally, the following statement applies with regards to licensing for any code published in any NOAA repository. This should be included within a `LICENSE.md` file at the root of each repository. Repositories that are code packages should also add this to the repository `README.md`.

::: {.callout-note icon=false}

## LICENSE.md

Software code created by U.S. Government employees is not subject to copyright in the United States (17 U.S.C. §105). The United States/Department of Commerce reserves all rights to seek and obtain copyright protection in countries other than the United States for Software authored in its entirety by the Department of Commerce. To this end, the Department of Commerce hereby grants to Recipient a royalty-free, nonexclusive license to use, copy, and create derivative works of the Software outside of the United States.

:::

## Contact and Resources

These guidelines were developed by the NMFS R User Group administrators with input from (scientific) administrators of GitHub organizations that collaborate and deliver science products on GitHub. The NMFS R User Group supports agency staff in the use of open science and reproducible science tools within the agency. See the [NMFS Open Science](https://nmfs-opensci.github.io/) website for contact information.
